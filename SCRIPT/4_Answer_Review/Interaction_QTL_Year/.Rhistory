manat_plot=function(data, my_xlab){
plot(-log10(data$`pval-marker`) , pch=20 , col=as.numeric(data$chr) , cex=1.3, xaxt="n", ylab="LOD - scores" , xlab=my_xlab)
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(data))
num=aggregate(num, by=list(data$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
}
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
manat_plot(res_DL_2012, "DL 2012")
manat_plot(res_DS_2015, "DS 2015")
manat_plot(res_DL_2015, "DL 2015")
# Select the corresponding phenotype data
Y_tmp=Y[which(Y$pop=="BX" & Y$year=="2015") , ]
# Select the corresponding genotyping data?
XNNA_tmp=XNNA[ which (substr(rownames(XNNA),1,2)=="BX" & grepl("2015" , rownames(XNNA))) , ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
# Kinship matrix
K<-genMatrix(XNNA_tmp)
# I = identity matrix
I<-diag(nrow(Y_tmp))
# Variance components
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
# Test marker per marker
llk.hk1 <- scanOne(y=Y_tmp$Elisa_blup_AR1, vc=mod1, gdat=XNNA_tmp ,test="Chisq")
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(llk.hk1$p) , llk.hk1$p), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$llk.hk1.p) , ]
# And plot it
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DL_2015=AA
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
# Function to plot
manat_plot=function(data, my_xlab){
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n", xlab="my_xlab" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
}
manat_plot(res_DL_2012, "DL 2012")
# Function to plot
manat_plot=function(data, my_xlab){
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n", xlab="my_xlab" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
}
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
manat_plot(res_DL_2012, "DL 2012")
manat_plot(res_DS_2015, "DS 2015")
manat_plot(res_DL_2015, "DL 2015")
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
manat_plot(res_DL_2012, "DL 2012")
manat_plot(res_DS_2015, "DS 2015")
manat_plot(res_DL_2015, "DL 2015")
head(AA)
# Function to plot
manat_plot=function(data, my_xlab){
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n", xlab="my_xlab" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
}
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
manat_plot(res_DL_2012, "DL 2012")
manat_plot(res_DS_2015, "DS 2015")
manat_plot(res_DL_2015, "DL 2015")
par(mfrow=c(2,1))
manat_plot(res_DSDL_2012, "DS & DL in 2012")
manat_plot(res_DSDL_2012, "DS & DL in 2015")
par(mfrow=c(1,2))
manat_plot(res_DS_2012_2015, "DS in 2012 + 2015")
manat_plot(res_DL_2012_2015, "DL in 2012 + 2015")
par(mfrow=c(1,1))
manat_plot(res_DSDL_2012_2015, "DS +DL in 2012 + 2015")
par(mfrow=c(1,1))
AA=res_DSDL_2012_2015_inter
plot(-log10(AA$pvaluesexpected) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" , ylim=c(0,4) )
abline(h=-log10(0.05), col="grey", lwd=1.5)
abline(h=3.61, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Select the corresponding phenotype data
Y_tmp=Y[which(Y$pop=="TT" & Y$year=="2012") , ]
# Select the corresponding genotyping data?
XNNA_tmp=XNNA[ which (substr(rownames(XNNA),1,2)=="TT" & grepl("2012" , rownames(XNNA))) , ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
# Kinship matrix
K<-genMatrix(XNNA_tmp)
# I = identity matrix
I<-diag(nrow(Y_tmp))
# Variance components
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
# Test marker per marker
llk.hk1 <- scanOne(y=Y_tmp$Elisa_blup_AR1, vc=mod1, gdat=XNNA_tmp ,test="Chisq")
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(llk.hk1$p) , llk.hk1$p), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$llk.hk1.p) , ]
# And plot it
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DS_2012=AA
# Select the corresponding phenotype data
Y_tmp=Y[which(Y$pop=="TT" & Y$year=="2015") , ]
# Select the corresponding genotyping data?
XNNA_tmp=XNNA[ which (substr(rownames(XNNA),1,2)=="TT" & grepl("2015" , rownames(XNNA))) , ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
# Kinship matrix
K<-genMatrix(XNNA_tmp)
# I = identity matrix
I<-diag(nrow(Y_tmp))
# Variance components
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
# Test marker per marker
llk.hk1 <- scanOne(y=Y_tmp$Elisa_blup_AR1, vc=mod1, gdat=XNNA_tmp ,test="Chisq")
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(llk.hk1$p) , llk.hk1$p), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$llk.hk1.p) , ]
# And plot it
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DS_2015=AA
# Select the corresponding phenotype data
Y_tmp=Y[which(Y$pop=="BX" & Y$year=="2012") , ]
# Select the corresponding genotyping data?
XNNA_tmp=XNNA[ which (substr(rownames(XNNA),1,2)=="BX" & grepl("2012" , rownames(XNNA))) , ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
# Kinship matrix
K<-genMatrix(XNNA_tmp)
# I = identity matrix
I<-diag(nrow(Y_tmp))
# Variance components
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
# Test marker per marker
llk.hk1 <- scanOne(y=Y_tmp$Elisa_blup_AR1, vc=mod1, gdat=XNNA_tmp ,test="Chisq")
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(llk.hk1$p) , llk.hk1$p), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$llk.hk1.p) , ]
# And plot it
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DL_2012=AA
# Select the corresponding phenotype data
Y_tmp=Y[which(Y$pop=="BX" & Y$year=="2015") , ]
# Select the corresponding genotyping data?
XNNA_tmp=XNNA[ which (substr(rownames(XNNA),1,2)=="BX" & grepl("2015" , rownames(XNNA))) , ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
# Kinship matrix
K<-genMatrix(XNNA_tmp)
# I = identity matrix
I<-diag(nrow(Y_tmp))
# Variance components
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
# Test marker per marker
llk.hk1 <- scanOne(y=Y_tmp$Elisa_blup_AR1, vc=mod1, gdat=XNNA_tmp ,test="Chisq")
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(llk.hk1$p) , llk.hk1$p), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$llk.hk1.p) , ]
# And plot it
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DL_2015=AA
# Function to plot
manat_plot=function(data, my_xlab){
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n", xlab="my_xlab" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
}
par(mfrow=c(2,2))
manat_plot(res_DS_2012, "DS 2012")
manat_plot(res_DL_2012, "DL 2012")
manat_plot(res_DS_2015, "DS 2015")
manat_plot(res_DL_2015, "DL 2015")
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, x=Y_tmp$year, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
Y_tmp=Y
XNNA_tmp=XNNA
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
dim(XNNA_tmp)
K<-genMatrix(XNNA_tmp)
I<-diag(nrow(Y_tmp))
mod1<-estVC(y=Y_tmp$Elisa_blup_AR1, x=Y_tmp$year, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
llk.hk1 <- scanOne(y=Y_tmp$Elisa_blup_AR1, x=Y_tmp$year, vc=mod1, gdat=XNNA_tmp ,test="None")
llk.hk2 <- scanOne(y=Y_tmp$Elisa_blup_AR1, x=Y_tmp$year, intcovar=Y$year, vc=mod1, gdat=XNNA_tmp ,test="None")
diff_deviance <- llk.hk1$p - llk.hk2$p
pvaluesexpected=1-pchisq(diff_deviance, 1)
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(pvaluesexpected) , pvaluesexpected), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$pvaluesexpected) , ]
# And plot it
plot(-log10(AA$pvaluesexpected) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" , ylim=c(0,4) )
abline(h=-log10(0.05), col="grey", lwd=1.5)
abline(h=3.61, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DSDL_2012_2015_inter=AA
head(llk.hk1)
diff_deviance <- llk.hk1$p - llk.hk2$p
head(diff_deviance)
head(llk.hk2)
diff_deviance <- llk.hk2$p - llk.hk1$p
pvaluesexpected=1-pchisq(diff_deviance, 1)
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(pvaluesexpected) , pvaluesexpected), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$pvaluesexpected) , ]
# And plot it
plot(-log10(AA$pvaluesexpected) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" , ylim=c(0,4) )
abline(h=-log10(0.05), col="grey", lwd=1.5)
abline(h=3.61, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DSDL_2012_2015_inter=AA
head(res_DSDL_2012_2015_inter)
a=res_DSDL_2012_2015_inter
a[a$pvaluesexpected==max(a$pvaluesexpected) , ]
a[a$pvaluesexpected==min(a$pvaluesexpected) , ]
names(llk.hk2)
llk.hk2$parameters[names(llk.hk2$parameters)=="Cluster_2740|Contig1|complementarySeq@2743"]
head(res_DSDL_2012_2015_inter)
a=res_DSDL_2012_2015_inter[which(res_DSDL_2012_2015_inter$chr=="2A")]
a=res_DSDL_2012_2015_inter[which(res_DSDL_2012_2015_inter$chr=="2A") , ]
a[a$pvaluesexpected==min(a$pvaluesexpected) , ]
a=res_DSDL_2012_2015_inter[which(res_DSDL_2012_2015_inter$chr=="2A") , ]
a[a$pvaluesexpected==min(a$pvaluesexpected) , ]
b=res_DSDL_2012_2015_inter[which(res_DSDL_2012_2015_inter$chr=="7A") , ]
b[b$pvaluesexpected==min(b$pvaluesexpected) , ]
c=res_DSDL_2012_2015_inter[which(res_DSDL_2012_2015_inter$chr=="7B") , ]
c[c$pvaluesexpected==min(c$pvaluesexpected) , ]
my_path="~/Dropbox/Publi_Mosaique/DATA/DATA"
# Raw phenotypuc data, all pop & all years:
all_pheno <- read.table(paste(my_path,"Data2012_2015.csv",sep="/") , header=T , sep="," , na.strings="NA")
# Consensus genetic map:
map  <- read.table(paste(my_path,"genetic_map.txt",sep="/") , header=T , sep="," , na.strings="NA")
# blups & LOD scores for DS
Y_DS <- read.table(paste(my_path,"DS/phenotypage.csv",sep="/") , header=T , sep=";" , na.strings="NA")
DS   <- read.table(paste(my_path,"DS/bilan_simple_marker",sep="/") , header=T , sep="," , na.strings="NA")
# blups & LOD scores for DL
Y_DL <- read.table(paste(my_path,"DL/phenotypage.csv",sep="/") , header=T , sep=";" , na.strings="NA")
DL   <- read.table(paste(my_path,"DL/bilan_simple_marker",sep="/") , header=T , sep="," , na.strings="NA")
# blups & LOD scores for both pops groupes together
Y_BOTH <- read.table(paste(my_path,"GROUPED/phenotypage.csv",sep="/") , header=T , sep=";" , na.strings="NA")
BOTH   <- read.table(paste(my_path,"GROUPED/bilan_simple_marker",sep="/") , header=T , sep="," , na.strings="NA")
my_lod_seuil=3.61
#data
variables=c("NV_blup_AR1_2012", "NV_blup_AR1_2015", "ELISA_blup_AR1_2012",  "ELISA_blup_AR1_2015", "QPCR_blup_AR1_2015")
BOTH=BOTH[ order(BOTH$LG,BOTH$Distance) , ]
BOTH=BOTH[which(BOTH$variable%in%variables) , ]
# Préparation des paramètres
xchro=c(seq(5,15,5) )
chromosomes=c("2A","7A","7B")
size_IC=1.5
#Création d'un tableau bilan
bil=data.frame(matrix(0,30,9))
colnames(bil)=c("pop","carac","chromo","LOD_max","position","marker","IC","R2","a")
#Boucle pour les 5 variable d'intéret + les 3 chromosomes d'intéret
data=BOTH
num_line_bilan=num_line_bilan=0
num_chromo=0
for(chrom in chromosomes){
num_variable=0
num_col=0
num_chromo=num_chromo+1
for(var in variables){
num_col=num_col+1
current_data=data[ data$variable==var & data$LG==chrom  , ]
current_data=current_data[!is.na(current_data$LOD) , ]
signif_data=current_data[current_data$LOD>my_lod_seuil  , ]
#Si j'ai des marqueurs significatifs
if(nrow(signif_data)>0){
#Je récupère les infos de ce QTL
LOD_max=max(signif_data$LOD)
mark_max=signif_data$marqueur[signif_data$LOD==LOD_max]
pos_max=signif_data$Distance[signif_data$LOD==LOD_max]
r2_max=signif_data$R2[signif_data$LOD==LOD_max]
a_max=signif_data$a[signif_data$LOD==LOD_max]
#Détermination IC --> je bloque la zone max a 30 cM
in_IC=current_data[ current_data$LOD > (LOD_max-size_IC) & current_data$Distance > (pos_max-30) & current_data$Distance < (pos_max+30)  , ]
IC_min=min(in_IC$Distance)
IC_max=max(in_IC$Distance)
#Je remplie le tableau bilan
num_line_bilan=num_line_bilan+1
bil[num_line_bilan , 1]="BOTH"
bil[num_line_bilan , 2]=var
bil[num_line_bilan , 3]=chrom
bil[num_line_bilan , 4]=LOD_max
bil[num_line_bilan , 5]=pos_max[1]
bil[num_line_bilan , 6]=as.character(mark_max)[1]
bil[num_line_bilan , 7]=paste(IC_min, IC_max, sep="-")
bil[num_line_bilan , 8]=r2_max[1]
bil[num_line_bilan , 9]=a_max[1]
}
}}
# Clean and print the Table
bil=bil[bil$pop!=0 , ]
bil=bil[ order(bil$pop , bil$chromo , bil$carac) , ]
#data
variables=c("NV_blup_AR1_2012", "NV_blup_AR1_2015", "ELISA_blup_AR1_2012",  "ELISA_blup_AR1_2015", "QPCR_blup_AR1_2015")
BOTH=BOTH[ order(BOTH$LG,BOTH$Distance) , ]
BOTH=BOTH[which(BOTH$variable%in%variables) , ]
# Préparation des paramètres
xchro=c(seq(5,15,5) )
chromosomes=c("2A","7A","7B","4B")
size_IC=1.5
#Création d'un tableau bilan
bil=data.frame(matrix(0,30,9))
colnames(bil)=c("pop","carac","chromo","LOD_max","position","marker","IC","R2","a")
#Boucle pour les 5 variable d'intéret + les 3 chromosomes d'intéret
data=BOTH
num_line_bilan=num_line_bilan=0
num_chromo=0
for(chrom in chromosomes){
num_variable=0
num_col=0
num_chromo=num_chromo+1
for(var in variables){
num_col=num_col+1
current_data=data[ data$variable==var & data$LG==chrom  , ]
current_data=current_data[!is.na(current_data$LOD) , ]
signif_data=current_data[current_data$LOD>my_lod_seuil  , ]
#Si j'ai des marqueurs significatifs
if(nrow(signif_data)>0){
#Je récupère les infos de ce QTL
LOD_max=max(signif_data$LOD)
mark_max=signif_data$marqueur[signif_data$LOD==LOD_max]
pos_max=signif_data$Distance[signif_data$LOD==LOD_max]
r2_max=signif_data$R2[signif_data$LOD==LOD_max]
a_max=signif_data$a[signif_data$LOD==LOD_max]
#Détermination IC --> je bloque la zone max a 30 cM
in_IC=current_data[ current_data$LOD > (LOD_max-size_IC) & current_data$Distance > (pos_max-30) & current_data$Distance < (pos_max+30)  , ]
IC_min=min(in_IC$Distance)
IC_max=max(in_IC$Distance)
#Je remplie le tableau bilan
num_line_bilan=num_line_bilan+1
bil[num_line_bilan , 1]="BOTH"
bil[num_line_bilan , 2]=var
bil[num_line_bilan , 3]=chrom
bil[num_line_bilan , 4]=LOD_max
bil[num_line_bilan , 5]=pos_max[1]
bil[num_line_bilan , 6]=as.character(mark_max)[1]
bil[num_line_bilan , 7]=paste(IC_min, IC_max, sep="-")
bil[num_line_bilan , 8]=r2_max[1]
bil[num_line_bilan , 9]=a_max[1]
}
}}
# Clean and print the Table
bil=bil[bil$pop!=0 , ]
bil=bil[ order(bil$pop , bil$chromo , bil$carac) , ]
bil
head(BOTH)
BOTH[which(BOTH$LOD>3.61 & BOTH$LG=="4B") , ]
# To use cache in the document
knitr::opts_chunk$set(cache=TRUE)
library(QTLRel)
library(xtable)
genotype<-read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/GROUPED/genotypage.csv", sep = ";" , header = F, na.strings = "-")
genotype=as.matrix(genotype)
colnames(genotype)=genotype[1,]
genotype=as.data.frame(genotype[-1 , ])
names(genotype)[1]<-"geno"
print("--- Your genotyping matrix looks correct. Dimension of the matrix are :")
print(dim(genotype))
# I copy this matrix 2 times, since I read 2012 and 2015 together.
rownames(genotype)=genotype[,1]
genotype=genotype[,-1]
a=genotype ; rownames(a)=paste(rownames(a),"2012",sep="_")
b=genotype ; rownames(b)=paste(rownames(b),"2015",sep="_")
genotype=rbind(a,b)
map <- read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/genetic_map.txt" , header=T , dec = ".", na.strings = "-" , check.names=F)
colnames(map) <- c("LG", "marqueur", "Distance","group_physique","Posi_physique")
rownames(map) <- map$marqueur
map$LG <- as.factor(map$LG)
print("--- Your genetic map looks correct. Dimension of the map are :")
print(dim(map))
map=map[	, c(2,1,3,5)]
colnames(map)=c("snp","chr", "dist", "phyPos")
BLUP<-read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/GROUPED/phenotypage.csv", header = TRUE, sep=";")
colnames(BLUP)[1]="geno"
print("--- Your Phenotyping matrix looks correct. Dimension of the matrix are :")
print(dim(BLUP))
BLUP<-read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/GROUPED/phenotypage.csv", header = TRUE, sep=";")
colnames(BLUP)[1]="geno"
print("--- Your Phenotyping matrix looks correct. Dimension of the matrix are :")
print(dim(BLUP))
# Fichier de phénotypage modifié, il va falloir mettre la Elisa de 2012 et 2015 ensemble, avec une colonne année.
a=BLUP[, c(1,2)] ; a$year="2012" ; colnames(a)=c("geno", "SS_blup_AR1","year")
#a[,2]=a[,2]/sqrt( mean(c(0.66,0.83)) )
#a[,2]=ifelse(substr(a$geno, 1,2)=="TT", a[,2]/sqrt(0.66) , a[,2]/sqrt(0.83))
b=BLUP[, c(1,4)] ; b$year="2015" ; colnames(b)=c("geno", "SS_blup_AR1", "year")
#b[,2]=b[,2]/sqrt( mean(c(1.2,1.21)) )
#b[,2]=ifelse(substr(b$geno, 1,2)=="TT", b[,2]/sqrt(1.2) , a[,2]/sqrt(1.21))
BLUP=rbind(a,b)
rownames(BLUP)=paste( BLUP[,1], BLUP$year,sep="_")
BLUP=BLUP[,-1]
# Note: On peut garder les blups tels quels / ou les pondéré par la variance génet de chaque année moyennée sur les 2 pops / ou par la variance génet de chaque année et chaque pop.
head(Y)
Y=na.omit(BLUP)
Y=Y[which(rownames(Y)%in%rownames(genotype)) , ]
Y$pop=substr(rownames(Y),1,2)
genotype=genotype[which(rownames(genotype)%in%rownames(Y)) , ]
genotype=genotype[ match(rownames(Y),rownames(genotype)) , ]
head(Y)
BLUP<-read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/GROUPED/phenotypage.csv", header = TRUE, sep=";")
colnames(BLUP)[1]="geno"
print("--- Your Phenotyping matrix looks correct. Dimension of the matrix are :")
print(dim(BLUP))
# Fichier de phénotypage modifié, il va falloir mettre la SS de 2012 et 2015 ensemble, avec une colonne année.
a=BLUP[, c(1,2)] ; a$year="2012" ; colnames(a)=c("geno", "SS_blup_AR1","year")
#a[,2]=a[,2]/sqrt( mean(c(0.66,0.83)) )
#a[,2]=ifelse(substr(a$geno, 1,2)=="TT", a[,2]/sqrt(0.66) , a[,2]/sqrt(0.83))
b=BLUP[, c(1,4)] ; b$year="2015" ; colnames(b)=c("geno", "SS_blup_AR1", "year")
#b[,2]=b[,2]/sqrt( mean(c(1.2,1.21)) )
#b[,2]=ifelse(substr(b$geno, 1,2)=="TT", b[,2]/sqrt(1.2) , a[,2]/sqrt(1.21))
BLUP=rbind(a,b)
rownames(BLUP)=paste( BLUP[,1], BLUP$year,sep="_")
BLUP=BLUP[,-1]
# Note: On peut garder les blups tels quels / ou les pondéré par la variance génet de chaque année moyennée sur les 2 pops / ou par la variance génet de chaque année et chaque pop.
Y=na.omit(BLUP)
Y=Y[which(rownames(Y)%in%rownames(genotype)) , ]
Y$pop=substr(rownames(Y),1,2)
genotype=genotype[which(rownames(genotype)%in%rownames(Y)) , ]
genotype=genotype[ match(rownames(Y),rownames(genotype)) , ]
# missing data
set.seed(123)
XNNA=genotype
my_fun=function(x){length(x[x=="A" & !is.na(x) ])/length(!is.na(x)) }
prop=apply(XNNA , 2 , my_fun)
for(i in c(1:ncol(XNNA))){
aa=XNNA[,i][is.na(XNNA[,i])]
bb=rbinom(length(aa),1,prob=prop[i])
XNNA[,i][is.na(XNNA[,i])]=c("B","A")[bb+1]
}
# Change "A" to "AA"
XNNA=as.matrix(XNNA)
XNNA[which(XNNA=="A")]<-"AA"
XNNA[which(XNNA=="B")]<-"BB"
# Select the corresponding phenotype data
Y_tmp=Y[which(Y$pop=="TT" & Y$year=="2012") , ]
# Select the corresponding genotyping data?
XNNA_tmp=XNNA[ which (substr(rownames(XNNA),1,2)=="TT" & grepl("2012" , rownames(XNNA))) , ]
XNNA_tmp=XNNA_tmp [ , which(apply(XNNA_tmp , 2 , function(x){length(unique(x))} )==2) ]
dim(XNNA_tmp)
# Kinship matrix
K<-genMatrix(XNNA_tmp)
# I = identity matrix
I<-diag(nrow(Y_tmp))
# Variance components
mod1<-estVC(y=Y_tmp$SS_blup_AR1, v=list(AA=K$AA,DD=NULL,HH=NULL,AD=NULL,MH=NULL,EE=I))
# Test marker per marker
llk.hk1 <- scanOne(y=Y_tmp$SS_blup_AR1, vc=mod1, gdat=XNNA_tmp ,test="Chisq")
# Merge LODs with the genetic map
AA=merge(map,data.frame( names(llk.hk1$p) , llk.hk1$p), by.x=1 , by.y=1, all.x=T)
AA=AA[order(AA$chr, AA$dist) , ]
AA=AA[!is.na(AA$llk.hk1.p) , ]
# And plot it
plot(-log10(AA$llk.hk1.p) , pch=20 , col=as.numeric(AA$chr) , cex=1.3, xaxt="n" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(AA))
num=aggregate(num, by=list(AA$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# Save as the object
res_DS_2012=AA
donnees <- merge(genotype, Y , by.x=1 , by.y=1 )
